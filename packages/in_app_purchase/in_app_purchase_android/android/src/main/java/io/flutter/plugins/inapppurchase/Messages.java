// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v17.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.inapppurchase;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
          "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError(
        "channel-error", "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Pigeon version of Java BillingClient.ProductType. */
  public enum PlatformProductType {
    INAPP(0),
    SUBS(1);

    final int index;

    private PlatformProductType(final int index) {
      this.index = index;
    }
  }

  /** Pigeon version of billing_client_wrapper.dart's BillingChoiceMode. */
  public enum PlatformBillingChoiceMode {
    /**
     * Billing through google play.
     *
     * <p>Default state.
     */
    PLAY_BILLING_ONLY(0),
    /** Billing through app provided flow. */
    ALTERNATIVE_BILLING_ONLY(1),
    /** Users can choose Play billing or alternative billing. */
    USER_CHOICE_BILLING(2);

    final int index;

    private PlatformBillingChoiceMode(final int index) {
      this.index = index;
    }
  }

  /** Pigeon version of Java Purchase.PurchaseState. */
  public enum PlatformPurchaseState {
    UNSPECIFIED(0),
    PURCHASED(1),
    PENDING(2);

    final int index;

    private PlatformPurchaseState(final int index) {
      this.index = index;
    }
  }

  /** Pigeon version of Java ProductDetails.RecurrenceMode. */
  public enum PlatformRecurrenceMode {
    FINITE_RECURRING(0),
    INFINITE_RECURRING(1),
    NON_RECURRING(2);

    final int index;

    private PlatformRecurrenceMode(final int index) {
      this.index = index;
    }
  }

  /**
   * Pigeon version of Java QueryProductDetailsParams.Product.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformQueryProduct {
    private @NonNull String productId;

    public @NonNull String getProductId() {
      return productId;
    }

    public void setProductId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productId\" is null.");
      }
      this.productId = setterArg;
    }

    private @NonNull PlatformProductType productType;

    public @NonNull PlatformProductType getProductType() {
      return productType;
    }

    public void setProductType(@NonNull PlatformProductType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productType\" is null.");
      }
      this.productType = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformQueryProduct() {}

    public static final class Builder {

      private @Nullable String productId;

      @CanIgnoreReturnValue
      public @NonNull Builder setProductId(@NonNull String setterArg) {
        this.productId = setterArg;
        return this;
      }

      private @Nullable PlatformProductType productType;

      @CanIgnoreReturnValue
      public @NonNull Builder setProductType(@NonNull PlatformProductType setterArg) {
        this.productType = setterArg;
        return this;
      }

      public @NonNull PlatformQueryProduct build() {
        PlatformQueryProduct pigeonReturn = new PlatformQueryProduct();
        pigeonReturn.setProductId(productId);
        pigeonReturn.setProductType(productType);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(productId);
      toListResult.add(productType == null ? null : productType.index);
      return toListResult;
    }

    static @NonNull PlatformQueryProduct fromList(@NonNull ArrayList<Object> list) {
      PlatformQueryProduct pigeonResult = new PlatformQueryProduct();
      Object productId = list.get(0);
      pigeonResult.setProductId((String) productId);
      Object productType = list.get(1);
      pigeonResult.setProductType(PlatformProductType.values()[(int) productType]);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of Java AccountIdentifiers.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformAccountIdentifiers {
    private @Nullable String obfuscatedAccountId;

    public @Nullable String getObfuscatedAccountId() {
      return obfuscatedAccountId;
    }

    public void setObfuscatedAccountId(@Nullable String setterArg) {
      this.obfuscatedAccountId = setterArg;
    }

    private @Nullable String obfuscatedProfileId;

    public @Nullable String getObfuscatedProfileId() {
      return obfuscatedProfileId;
    }

    public void setObfuscatedProfileId(@Nullable String setterArg) {
      this.obfuscatedProfileId = setterArg;
    }

    public static final class Builder {

      private @Nullable String obfuscatedAccountId;

      @CanIgnoreReturnValue
      public @NonNull Builder setObfuscatedAccountId(@Nullable String setterArg) {
        this.obfuscatedAccountId = setterArg;
        return this;
      }

      private @Nullable String obfuscatedProfileId;

      @CanIgnoreReturnValue
      public @NonNull Builder setObfuscatedProfileId(@Nullable String setterArg) {
        this.obfuscatedProfileId = setterArg;
        return this;
      }

      public @NonNull PlatformAccountIdentifiers build() {
        PlatformAccountIdentifiers pigeonReturn = new PlatformAccountIdentifiers();
        pigeonReturn.setObfuscatedAccountId(obfuscatedAccountId);
        pigeonReturn.setObfuscatedProfileId(obfuscatedProfileId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(obfuscatedAccountId);
      toListResult.add(obfuscatedProfileId);
      return toListResult;
    }

    static @NonNull PlatformAccountIdentifiers fromList(@NonNull ArrayList<Object> list) {
      PlatformAccountIdentifiers pigeonResult = new PlatformAccountIdentifiers();
      Object obfuscatedAccountId = list.get(0);
      pigeonResult.setObfuscatedAccountId((String) obfuscatedAccountId);
      Object obfuscatedProfileId = list.get(1);
      pigeonResult.setObfuscatedProfileId((String) obfuscatedProfileId);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of Java BillingResult.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformBillingResult {
    private @NonNull Long responseCode;

    public @NonNull Long getResponseCode() {
      return responseCode;
    }

    public void setResponseCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"responseCode\" is null.");
      }
      this.responseCode = setterArg;
    }

    private @NonNull String debugMessage;

    public @NonNull String getDebugMessage() {
      return debugMessage;
    }

    public void setDebugMessage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"debugMessage\" is null.");
      }
      this.debugMessage = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformBillingResult() {}

    public static final class Builder {

      private @Nullable Long responseCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setResponseCode(@NonNull Long setterArg) {
        this.responseCode = setterArg;
        return this;
      }

      private @Nullable String debugMessage;

      @CanIgnoreReturnValue
      public @NonNull Builder setDebugMessage(@NonNull String setterArg) {
        this.debugMessage = setterArg;
        return this;
      }

      public @NonNull PlatformBillingResult build() {
        PlatformBillingResult pigeonReturn = new PlatformBillingResult();
        pigeonReturn.setResponseCode(responseCode);
        pigeonReturn.setDebugMessage(debugMessage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(responseCode);
      toListResult.add(debugMessage);
      return toListResult;
    }

    static @NonNull PlatformBillingResult fromList(@NonNull ArrayList<Object> list) {
      PlatformBillingResult pigeonResult = new PlatformBillingResult();
      Object responseCode = list.get(0);
      pigeonResult.setResponseCode(
          (responseCode == null)
              ? null
              : ((responseCode instanceof Integer) ? (Integer) responseCode : (Long) responseCode));
      Object debugMessage = list.get(1);
      pigeonResult.setDebugMessage((String) debugMessage);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of Java ProductDetails.OneTimePurchaseOfferDetails.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformOneTimePurchaseOfferDetails {
    private @NonNull Long priceAmountMicros;

    public @NonNull Long getPriceAmountMicros() {
      return priceAmountMicros;
    }

    public void setPriceAmountMicros(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"priceAmountMicros\" is null.");
      }
      this.priceAmountMicros = setterArg;
    }

    private @NonNull String formattedPrice;

    public @NonNull String getFormattedPrice() {
      return formattedPrice;
    }

    public void setFormattedPrice(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"formattedPrice\" is null.");
      }
      this.formattedPrice = setterArg;
    }

    private @NonNull String priceCurrencyCode;

    public @NonNull String getPriceCurrencyCode() {
      return priceCurrencyCode;
    }

    public void setPriceCurrencyCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"priceCurrencyCode\" is null.");
      }
      this.priceCurrencyCode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformOneTimePurchaseOfferDetails() {}

    public static final class Builder {

      private @Nullable Long priceAmountMicros;

      @CanIgnoreReturnValue
      public @NonNull Builder setPriceAmountMicros(@NonNull Long setterArg) {
        this.priceAmountMicros = setterArg;
        return this;
      }

      private @Nullable String formattedPrice;

      @CanIgnoreReturnValue
      public @NonNull Builder setFormattedPrice(@NonNull String setterArg) {
        this.formattedPrice = setterArg;
        return this;
      }

      private @Nullable String priceCurrencyCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setPriceCurrencyCode(@NonNull String setterArg) {
        this.priceCurrencyCode = setterArg;
        return this;
      }

      public @NonNull PlatformOneTimePurchaseOfferDetails build() {
        PlatformOneTimePurchaseOfferDetails pigeonReturn =
            new PlatformOneTimePurchaseOfferDetails();
        pigeonReturn.setPriceAmountMicros(priceAmountMicros);
        pigeonReturn.setFormattedPrice(formattedPrice);
        pigeonReturn.setPriceCurrencyCode(priceCurrencyCode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(priceAmountMicros);
      toListResult.add(formattedPrice);
      toListResult.add(priceCurrencyCode);
      return toListResult;
    }

    static @NonNull PlatformOneTimePurchaseOfferDetails fromList(@NonNull ArrayList<Object> list) {
      PlatformOneTimePurchaseOfferDetails pigeonResult = new PlatformOneTimePurchaseOfferDetails();
      Object priceAmountMicros = list.get(0);
      pigeonResult.setPriceAmountMicros(
          (priceAmountMicros == null)
              ? null
              : ((priceAmountMicros instanceof Integer)
                  ? (Integer) priceAmountMicros
                  : (Long) priceAmountMicros));
      Object formattedPrice = list.get(1);
      pigeonResult.setFormattedPrice((String) formattedPrice);
      Object priceCurrencyCode = list.get(2);
      pigeonResult.setPriceCurrencyCode((String) priceCurrencyCode);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of Java ProductDetails.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformProductDetails {
    private @NonNull String description;

    public @NonNull String getDescription() {
      return description;
    }

    public void setDescription(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"description\" is null.");
      }
      this.description = setterArg;
    }

    private @NonNull String name;

    public @NonNull String getName() {
      return name;
    }

    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    private @NonNull String productId;

    public @NonNull String getProductId() {
      return productId;
    }

    public void setProductId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productId\" is null.");
      }
      this.productId = setterArg;
    }

    private @NonNull PlatformProductType productType;

    public @NonNull PlatformProductType getProductType() {
      return productType;
    }

    public void setProductType(@NonNull PlatformProductType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productType\" is null.");
      }
      this.productType = setterArg;
    }

    private @NonNull String title;

    public @NonNull String getTitle() {
      return title;
    }

    public void setTitle(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"title\" is null.");
      }
      this.title = setterArg;
    }

    private @Nullable PlatformOneTimePurchaseOfferDetails oneTimePurchaseOfferDetails;

    public @Nullable PlatformOneTimePurchaseOfferDetails getOneTimePurchaseOfferDetails() {
      return oneTimePurchaseOfferDetails;
    }

    public void setOneTimePurchaseOfferDetails(
        @Nullable PlatformOneTimePurchaseOfferDetails setterArg) {
      this.oneTimePurchaseOfferDetails = setterArg;
    }

    private @Nullable List<PlatformSubscriptionOfferDetails> subscriptionOfferDetails;

    public @Nullable List<PlatformSubscriptionOfferDetails> getSubscriptionOfferDetails() {
      return subscriptionOfferDetails;
    }

    public void setSubscriptionOfferDetails(
        @Nullable List<PlatformSubscriptionOfferDetails> setterArg) {
      this.subscriptionOfferDetails = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformProductDetails() {}

    public static final class Builder {

      private @Nullable String description;

      @CanIgnoreReturnValue
      public @NonNull Builder setDescription(@NonNull String setterArg) {
        this.description = setterArg;
        return this;
      }

      private @Nullable String name;

      @CanIgnoreReturnValue
      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable String productId;

      @CanIgnoreReturnValue
      public @NonNull Builder setProductId(@NonNull String setterArg) {
        this.productId = setterArg;
        return this;
      }

      private @Nullable PlatformProductType productType;

      @CanIgnoreReturnValue
      public @NonNull Builder setProductType(@NonNull PlatformProductType setterArg) {
        this.productType = setterArg;
        return this;
      }

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@NonNull String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable PlatformOneTimePurchaseOfferDetails oneTimePurchaseOfferDetails;

      @CanIgnoreReturnValue
      public @NonNull Builder setOneTimePurchaseOfferDetails(
          @Nullable PlatformOneTimePurchaseOfferDetails setterArg) {
        this.oneTimePurchaseOfferDetails = setterArg;
        return this;
      }

      private @Nullable List<PlatformSubscriptionOfferDetails> subscriptionOfferDetails;

      @CanIgnoreReturnValue
      public @NonNull Builder setSubscriptionOfferDetails(
          @Nullable List<PlatformSubscriptionOfferDetails> setterArg) {
        this.subscriptionOfferDetails = setterArg;
        return this;
      }

      public @NonNull PlatformProductDetails build() {
        PlatformProductDetails pigeonReturn = new PlatformProductDetails();
        pigeonReturn.setDescription(description);
        pigeonReturn.setName(name);
        pigeonReturn.setProductId(productId);
        pigeonReturn.setProductType(productType);
        pigeonReturn.setTitle(title);
        pigeonReturn.setOneTimePurchaseOfferDetails(oneTimePurchaseOfferDetails);
        pigeonReturn.setSubscriptionOfferDetails(subscriptionOfferDetails);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(description);
      toListResult.add(name);
      toListResult.add(productId);
      toListResult.add(productType == null ? null : productType.index);
      toListResult.add(title);
      toListResult.add(
          (oneTimePurchaseOfferDetails == null) ? null : oneTimePurchaseOfferDetails.toList());
      toListResult.add(subscriptionOfferDetails);
      return toListResult;
    }

    static @NonNull PlatformProductDetails fromList(@NonNull ArrayList<Object> list) {
      PlatformProductDetails pigeonResult = new PlatformProductDetails();
      Object description = list.get(0);
      pigeonResult.setDescription((String) description);
      Object name = list.get(1);
      pigeonResult.setName((String) name);
      Object productId = list.get(2);
      pigeonResult.setProductId((String) productId);
      Object productType = list.get(3);
      pigeonResult.setProductType(PlatformProductType.values()[(int) productType]);
      Object title = list.get(4);
      pigeonResult.setTitle((String) title);
      Object oneTimePurchaseOfferDetails = list.get(5);
      pigeonResult.setOneTimePurchaseOfferDetails(
          (oneTimePurchaseOfferDetails == null)
              ? null
              : PlatformOneTimePurchaseOfferDetails.fromList(
                  (ArrayList<Object>) oneTimePurchaseOfferDetails));
      Object subscriptionOfferDetails = list.get(6);
      pigeonResult.setSubscriptionOfferDetails(
          (List<PlatformSubscriptionOfferDetails>) subscriptionOfferDetails);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of ProductDetailsResponseWrapper, which contains the components of the Java
   * ProductDetailsResponseListener callback.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformProductDetailsResponse {
    private @NonNull PlatformBillingResult billingResult;

    public @NonNull PlatformBillingResult getBillingResult() {
      return billingResult;
    }

    public void setBillingResult(@NonNull PlatformBillingResult setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"billingResult\" is null.");
      }
      this.billingResult = setterArg;
    }

    private @NonNull List<PlatformProductDetails> productDetails;

    public @NonNull List<PlatformProductDetails> getProductDetails() {
      return productDetails;
    }

    public void setProductDetails(@NonNull List<PlatformProductDetails> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productDetails\" is null.");
      }
      this.productDetails = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformProductDetailsResponse() {}

    public static final class Builder {

      private @Nullable PlatformBillingResult billingResult;

      @CanIgnoreReturnValue
      public @NonNull Builder setBillingResult(@NonNull PlatformBillingResult setterArg) {
        this.billingResult = setterArg;
        return this;
      }

      private @Nullable List<PlatformProductDetails> productDetails;

      @CanIgnoreReturnValue
      public @NonNull Builder setProductDetails(@NonNull List<PlatformProductDetails> setterArg) {
        this.productDetails = setterArg;
        return this;
      }

      public @NonNull PlatformProductDetailsResponse build() {
        PlatformProductDetailsResponse pigeonReturn = new PlatformProductDetailsResponse();
        pigeonReturn.setBillingResult(billingResult);
        pigeonReturn.setProductDetails(productDetails);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((billingResult == null) ? null : billingResult.toList());
      toListResult.add(productDetails);
      return toListResult;
    }

    static @NonNull PlatformProductDetailsResponse fromList(@NonNull ArrayList<Object> list) {
      PlatformProductDetailsResponse pigeonResult = new PlatformProductDetailsResponse();
      Object billingResult = list.get(0);
      pigeonResult.setBillingResult(
          (billingResult == null)
              ? null
              : PlatformBillingResult.fromList((ArrayList<Object>) billingResult));
      Object productDetails = list.get(1);
      pigeonResult.setProductDetails((List<PlatformProductDetails>) productDetails);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of AlternativeBillingOnlyReportingDetailsWrapper, which contains the components
   * of the Java AlternativeBillingOnlyReportingDetailsListener callback.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformAlternativeBillingOnlyReportingDetailsResponse {
    private @NonNull PlatformBillingResult billingResult;

    public @NonNull PlatformBillingResult getBillingResult() {
      return billingResult;
    }

    public void setBillingResult(@NonNull PlatformBillingResult setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"billingResult\" is null.");
      }
      this.billingResult = setterArg;
    }

    private @NonNull String externalTransactionToken;

    public @NonNull String getExternalTransactionToken() {
      return externalTransactionToken;
    }

    public void setExternalTransactionToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"externalTransactionToken\" is null.");
      }
      this.externalTransactionToken = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformAlternativeBillingOnlyReportingDetailsResponse() {}

    public static final class Builder {

      private @Nullable PlatformBillingResult billingResult;

      @CanIgnoreReturnValue
      public @NonNull Builder setBillingResult(@NonNull PlatformBillingResult setterArg) {
        this.billingResult = setterArg;
        return this;
      }

      private @Nullable String externalTransactionToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setExternalTransactionToken(@NonNull String setterArg) {
        this.externalTransactionToken = setterArg;
        return this;
      }

      public @NonNull PlatformAlternativeBillingOnlyReportingDetailsResponse build() {
        PlatformAlternativeBillingOnlyReportingDetailsResponse pigeonReturn =
            new PlatformAlternativeBillingOnlyReportingDetailsResponse();
        pigeonReturn.setBillingResult(billingResult);
        pigeonReturn.setExternalTransactionToken(externalTransactionToken);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((billingResult == null) ? null : billingResult.toList());
      toListResult.add(externalTransactionToken);
      return toListResult;
    }

    static @NonNull PlatformAlternativeBillingOnlyReportingDetailsResponse fromList(
        @NonNull ArrayList<Object> list) {
      PlatformAlternativeBillingOnlyReportingDetailsResponse pigeonResult =
          new PlatformAlternativeBillingOnlyReportingDetailsResponse();
      Object billingResult = list.get(0);
      pigeonResult.setBillingResult(
          (billingResult == null)
              ? null
              : PlatformBillingResult.fromList((ArrayList<Object>) billingResult));
      Object externalTransactionToken = list.get(1);
      pigeonResult.setExternalTransactionToken((String) externalTransactionToken);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of BillingConfigWrapper, which contains the components of the Java
   * BillingConfigResponseListener callback.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformBillingConfigResponse {
    private @NonNull PlatformBillingResult billingResult;

    public @NonNull PlatformBillingResult getBillingResult() {
      return billingResult;
    }

    public void setBillingResult(@NonNull PlatformBillingResult setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"billingResult\" is null.");
      }
      this.billingResult = setterArg;
    }

    private @NonNull String countryCode;

    public @NonNull String getCountryCode() {
      return countryCode;
    }

    public void setCountryCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"countryCode\" is null.");
      }
      this.countryCode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformBillingConfigResponse() {}

    public static final class Builder {

      private @Nullable PlatformBillingResult billingResult;

      @CanIgnoreReturnValue
      public @NonNull Builder setBillingResult(@NonNull PlatformBillingResult setterArg) {
        this.billingResult = setterArg;
        return this;
      }

      private @Nullable String countryCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setCountryCode(@NonNull String setterArg) {
        this.countryCode = setterArg;
        return this;
      }

      public @NonNull PlatformBillingConfigResponse build() {
        PlatformBillingConfigResponse pigeonReturn = new PlatformBillingConfigResponse();
        pigeonReturn.setBillingResult(billingResult);
        pigeonReturn.setCountryCode(countryCode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((billingResult == null) ? null : billingResult.toList());
      toListResult.add(countryCode);
      return toListResult;
    }

    static @NonNull PlatformBillingConfigResponse fromList(@NonNull ArrayList<Object> list) {
      PlatformBillingConfigResponse pigeonResult = new PlatformBillingConfigResponse();
      Object billingResult = list.get(0);
      pigeonResult.setBillingResult(
          (billingResult == null)
              ? null
              : PlatformBillingResult.fromList((ArrayList<Object>) billingResult));
      Object countryCode = list.get(1);
      pigeonResult.setCountryCode((String) countryCode);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of Java BillingFlowParams.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformBillingFlowParams {
    private @NonNull String product;

    public @NonNull String getProduct() {
      return product;
    }

    public void setProduct(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"product\" is null.");
      }
      this.product = setterArg;
    }

    private @NonNull Long prorationMode;

    public @NonNull Long getProrationMode() {
      return prorationMode;
    }

    public void setProrationMode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"prorationMode\" is null.");
      }
      this.prorationMode = setterArg;
    }

    private @Nullable String offerToken;

    public @Nullable String getOfferToken() {
      return offerToken;
    }

    public void setOfferToken(@Nullable String setterArg) {
      this.offerToken = setterArg;
    }

    private @Nullable String accountId;

    public @Nullable String getAccountId() {
      return accountId;
    }

    public void setAccountId(@Nullable String setterArg) {
      this.accountId = setterArg;
    }

    private @Nullable String obfuscatedProfileId;

    public @Nullable String getObfuscatedProfileId() {
      return obfuscatedProfileId;
    }

    public void setObfuscatedProfileId(@Nullable String setterArg) {
      this.obfuscatedProfileId = setterArg;
    }

    private @Nullable String oldProduct;

    public @Nullable String getOldProduct() {
      return oldProduct;
    }

    public void setOldProduct(@Nullable String setterArg) {
      this.oldProduct = setterArg;
    }

    private @Nullable String purchaseToken;

    public @Nullable String getPurchaseToken() {
      return purchaseToken;
    }

    public void setPurchaseToken(@Nullable String setterArg) {
      this.purchaseToken = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformBillingFlowParams() {}

    public static final class Builder {

      private @Nullable String product;

      @CanIgnoreReturnValue
      public @NonNull Builder setProduct(@NonNull String setterArg) {
        this.product = setterArg;
        return this;
      }

      private @Nullable Long prorationMode;

      @CanIgnoreReturnValue
      public @NonNull Builder setProrationMode(@NonNull Long setterArg) {
        this.prorationMode = setterArg;
        return this;
      }

      private @Nullable String offerToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setOfferToken(@Nullable String setterArg) {
        this.offerToken = setterArg;
        return this;
      }

      private @Nullable String accountId;

      @CanIgnoreReturnValue
      public @NonNull Builder setAccountId(@Nullable String setterArg) {
        this.accountId = setterArg;
        return this;
      }

      private @Nullable String obfuscatedProfileId;

      @CanIgnoreReturnValue
      public @NonNull Builder setObfuscatedProfileId(@Nullable String setterArg) {
        this.obfuscatedProfileId = setterArg;
        return this;
      }

      private @Nullable String oldProduct;

      @CanIgnoreReturnValue
      public @NonNull Builder setOldProduct(@Nullable String setterArg) {
        this.oldProduct = setterArg;
        return this;
      }

      private @Nullable String purchaseToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setPurchaseToken(@Nullable String setterArg) {
        this.purchaseToken = setterArg;
        return this;
      }

      public @NonNull PlatformBillingFlowParams build() {
        PlatformBillingFlowParams pigeonReturn = new PlatformBillingFlowParams();
        pigeonReturn.setProduct(product);
        pigeonReturn.setProrationMode(prorationMode);
        pigeonReturn.setOfferToken(offerToken);
        pigeonReturn.setAccountId(accountId);
        pigeonReturn.setObfuscatedProfileId(obfuscatedProfileId);
        pigeonReturn.setOldProduct(oldProduct);
        pigeonReturn.setPurchaseToken(purchaseToken);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(product);
      toListResult.add(prorationMode);
      toListResult.add(offerToken);
      toListResult.add(accountId);
      toListResult.add(obfuscatedProfileId);
      toListResult.add(oldProduct);
      toListResult.add(purchaseToken);
      return toListResult;
    }

    static @NonNull PlatformBillingFlowParams fromList(@NonNull ArrayList<Object> list) {
      PlatformBillingFlowParams pigeonResult = new PlatformBillingFlowParams();
      Object product = list.get(0);
      pigeonResult.setProduct((String) product);
      Object prorationMode = list.get(1);
      pigeonResult.setProrationMode(
          (prorationMode == null)
              ? null
              : ((prorationMode instanceof Integer)
                  ? (Integer) prorationMode
                  : (Long) prorationMode));
      Object offerToken = list.get(2);
      pigeonResult.setOfferToken((String) offerToken);
      Object accountId = list.get(3);
      pigeonResult.setAccountId((String) accountId);
      Object obfuscatedProfileId = list.get(4);
      pigeonResult.setObfuscatedProfileId((String) obfuscatedProfileId);
      Object oldProduct = list.get(5);
      pigeonResult.setOldProduct((String) oldProduct);
      Object purchaseToken = list.get(6);
      pigeonResult.setPurchaseToken((String) purchaseToken);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of Java ProductDetails.PricingPhase.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformPricingPhase {
    private @NonNull Long billingCycleCount;

    public @NonNull Long getBillingCycleCount() {
      return billingCycleCount;
    }

    public void setBillingCycleCount(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"billingCycleCount\" is null.");
      }
      this.billingCycleCount = setterArg;
    }

    private @NonNull PlatformRecurrenceMode recurrenceMode;

    public @NonNull PlatformRecurrenceMode getRecurrenceMode() {
      return recurrenceMode;
    }

    public void setRecurrenceMode(@NonNull PlatformRecurrenceMode setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"recurrenceMode\" is null.");
      }
      this.recurrenceMode = setterArg;
    }

    private @NonNull Long priceAmountMicros;

    public @NonNull Long getPriceAmountMicros() {
      return priceAmountMicros;
    }

    public void setPriceAmountMicros(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"priceAmountMicros\" is null.");
      }
      this.priceAmountMicros = setterArg;
    }

    private @NonNull String billingPeriod;

    public @NonNull String getBillingPeriod() {
      return billingPeriod;
    }

    public void setBillingPeriod(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"billingPeriod\" is null.");
      }
      this.billingPeriod = setterArg;
    }

    private @NonNull String formattedPrice;

    public @NonNull String getFormattedPrice() {
      return formattedPrice;
    }

    public void setFormattedPrice(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"formattedPrice\" is null.");
      }
      this.formattedPrice = setterArg;
    }

    private @NonNull String priceCurrencyCode;

    public @NonNull String getPriceCurrencyCode() {
      return priceCurrencyCode;
    }

    public void setPriceCurrencyCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"priceCurrencyCode\" is null.");
      }
      this.priceCurrencyCode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformPricingPhase() {}

    public static final class Builder {

      private @Nullable Long billingCycleCount;

      @CanIgnoreReturnValue
      public @NonNull Builder setBillingCycleCount(@NonNull Long setterArg) {
        this.billingCycleCount = setterArg;
        return this;
      }

      private @Nullable PlatformRecurrenceMode recurrenceMode;

      @CanIgnoreReturnValue
      public @NonNull Builder setRecurrenceMode(@NonNull PlatformRecurrenceMode setterArg) {
        this.recurrenceMode = setterArg;
        return this;
      }

      private @Nullable Long priceAmountMicros;

      @CanIgnoreReturnValue
      public @NonNull Builder setPriceAmountMicros(@NonNull Long setterArg) {
        this.priceAmountMicros = setterArg;
        return this;
      }

      private @Nullable String billingPeriod;

      @CanIgnoreReturnValue
      public @NonNull Builder setBillingPeriod(@NonNull String setterArg) {
        this.billingPeriod = setterArg;
        return this;
      }

      private @Nullable String formattedPrice;

      @CanIgnoreReturnValue
      public @NonNull Builder setFormattedPrice(@NonNull String setterArg) {
        this.formattedPrice = setterArg;
        return this;
      }

      private @Nullable String priceCurrencyCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setPriceCurrencyCode(@NonNull String setterArg) {
        this.priceCurrencyCode = setterArg;
        return this;
      }

      public @NonNull PlatformPricingPhase build() {
        PlatformPricingPhase pigeonReturn = new PlatformPricingPhase();
        pigeonReturn.setBillingCycleCount(billingCycleCount);
        pigeonReturn.setRecurrenceMode(recurrenceMode);
        pigeonReturn.setPriceAmountMicros(priceAmountMicros);
        pigeonReturn.setBillingPeriod(billingPeriod);
        pigeonReturn.setFormattedPrice(formattedPrice);
        pigeonReturn.setPriceCurrencyCode(priceCurrencyCode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(billingCycleCount);
      toListResult.add(recurrenceMode == null ? null : recurrenceMode.index);
      toListResult.add(priceAmountMicros);
      toListResult.add(billingPeriod);
      toListResult.add(formattedPrice);
      toListResult.add(priceCurrencyCode);
      return toListResult;
    }

    static @NonNull PlatformPricingPhase fromList(@NonNull ArrayList<Object> list) {
      PlatformPricingPhase pigeonResult = new PlatformPricingPhase();
      Object billingCycleCount = list.get(0);
      pigeonResult.setBillingCycleCount(
          (billingCycleCount == null)
              ? null
              : ((billingCycleCount instanceof Integer)
                  ? (Integer) billingCycleCount
                  : (Long) billingCycleCount));
      Object recurrenceMode = list.get(1);
      pigeonResult.setRecurrenceMode(PlatformRecurrenceMode.values()[(int) recurrenceMode]);
      Object priceAmountMicros = list.get(2);
      pigeonResult.setPriceAmountMicros(
          (priceAmountMicros == null)
              ? null
              : ((priceAmountMicros instanceof Integer)
                  ? (Integer) priceAmountMicros
                  : (Long) priceAmountMicros));
      Object billingPeriod = list.get(3);
      pigeonResult.setBillingPeriod((String) billingPeriod);
      Object formattedPrice = list.get(4);
      pigeonResult.setFormattedPrice((String) formattedPrice);
      Object priceCurrencyCode = list.get(5);
      pigeonResult.setPriceCurrencyCode((String) priceCurrencyCode);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of Java Purchase.
   *
   * <p>See also PurchaseWrapper on the Dart side.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformPurchase {
    private @Nullable String orderId;

    public @Nullable String getOrderId() {
      return orderId;
    }

    public void setOrderId(@Nullable String setterArg) {
      this.orderId = setterArg;
    }

    private @NonNull String packageName;

    public @NonNull String getPackageName() {
      return packageName;
    }

    public void setPackageName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"packageName\" is null.");
      }
      this.packageName = setterArg;
    }

    private @NonNull Long purchaseTime;

    public @NonNull Long getPurchaseTime() {
      return purchaseTime;
    }

    public void setPurchaseTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchaseTime\" is null.");
      }
      this.purchaseTime = setterArg;
    }

    private @NonNull String purchaseToken;

    public @NonNull String getPurchaseToken() {
      return purchaseToken;
    }

    public void setPurchaseToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchaseToken\" is null.");
      }
      this.purchaseToken = setterArg;
    }

    private @NonNull String signature;

    public @NonNull String getSignature() {
      return signature;
    }

    public void setSignature(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"signature\" is null.");
      }
      this.signature = setterArg;
    }

    private @NonNull List<String> products;

    public @NonNull List<String> getProducts() {
      return products;
    }

    public void setProducts(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"products\" is null.");
      }
      this.products = setterArg;
    }

    private @NonNull Boolean isAutoRenewing;

    public @NonNull Boolean getIsAutoRenewing() {
      return isAutoRenewing;
    }

    public void setIsAutoRenewing(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isAutoRenewing\" is null.");
      }
      this.isAutoRenewing = setterArg;
    }

    private @NonNull String originalJson;

    public @NonNull String getOriginalJson() {
      return originalJson;
    }

    public void setOriginalJson(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"originalJson\" is null.");
      }
      this.originalJson = setterArg;
    }

    private @NonNull String developerPayload;

    public @NonNull String getDeveloperPayload() {
      return developerPayload;
    }

    public void setDeveloperPayload(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"developerPayload\" is null.");
      }
      this.developerPayload = setterArg;
    }

    private @NonNull Boolean isAcknowledged;

    public @NonNull Boolean getIsAcknowledged() {
      return isAcknowledged;
    }

    public void setIsAcknowledged(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isAcknowledged\" is null.");
      }
      this.isAcknowledged = setterArg;
    }

    private @NonNull Long quantity;

    public @NonNull Long getQuantity() {
      return quantity;
    }

    public void setQuantity(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"quantity\" is null.");
      }
      this.quantity = setterArg;
    }

    private @NonNull PlatformPurchaseState purchaseState;

    public @NonNull PlatformPurchaseState getPurchaseState() {
      return purchaseState;
    }

    public void setPurchaseState(@NonNull PlatformPurchaseState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchaseState\" is null.");
      }
      this.purchaseState = setterArg;
    }

    private @Nullable PlatformAccountIdentifiers accountIdentifiers;

    public @Nullable PlatformAccountIdentifiers getAccountIdentifiers() {
      return accountIdentifiers;
    }

    public void setAccountIdentifiers(@Nullable PlatformAccountIdentifiers setterArg) {
      this.accountIdentifiers = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformPurchase() {}

    public static final class Builder {

      private @Nullable String orderId;

      @CanIgnoreReturnValue
      public @NonNull Builder setOrderId(@Nullable String setterArg) {
        this.orderId = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@NonNull String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable Long purchaseTime;

      @CanIgnoreReturnValue
      public @NonNull Builder setPurchaseTime(@NonNull Long setterArg) {
        this.purchaseTime = setterArg;
        return this;
      }

      private @Nullable String purchaseToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setPurchaseToken(@NonNull String setterArg) {
        this.purchaseToken = setterArg;
        return this;
      }

      private @Nullable String signature;

      @CanIgnoreReturnValue
      public @NonNull Builder setSignature(@NonNull String setterArg) {
        this.signature = setterArg;
        return this;
      }

      private @Nullable List<String> products;

      @CanIgnoreReturnValue
      public @NonNull Builder setProducts(@NonNull List<String> setterArg) {
        this.products = setterArg;
        return this;
      }

      private @Nullable Boolean isAutoRenewing;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsAutoRenewing(@NonNull Boolean setterArg) {
        this.isAutoRenewing = setterArg;
        return this;
      }

      private @Nullable String originalJson;

      @CanIgnoreReturnValue
      public @NonNull Builder setOriginalJson(@NonNull String setterArg) {
        this.originalJson = setterArg;
        return this;
      }

      private @Nullable String developerPayload;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeveloperPayload(@NonNull String setterArg) {
        this.developerPayload = setterArg;
        return this;
      }

      private @Nullable Boolean isAcknowledged;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsAcknowledged(@NonNull Boolean setterArg) {
        this.isAcknowledged = setterArg;
        return this;
      }

      private @Nullable Long quantity;

      @CanIgnoreReturnValue
      public @NonNull Builder setQuantity(@NonNull Long setterArg) {
        this.quantity = setterArg;
        return this;
      }

      private @Nullable PlatformPurchaseState purchaseState;

      @CanIgnoreReturnValue
      public @NonNull Builder setPurchaseState(@NonNull PlatformPurchaseState setterArg) {
        this.purchaseState = setterArg;
        return this;
      }

      private @Nullable PlatformAccountIdentifiers accountIdentifiers;

      @CanIgnoreReturnValue
      public @NonNull Builder setAccountIdentifiers(
          @Nullable PlatformAccountIdentifiers setterArg) {
        this.accountIdentifiers = setterArg;
        return this;
      }

      public @NonNull PlatformPurchase build() {
        PlatformPurchase pigeonReturn = new PlatformPurchase();
        pigeonReturn.setOrderId(orderId);
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setPurchaseTime(purchaseTime);
        pigeonReturn.setPurchaseToken(purchaseToken);
        pigeonReturn.setSignature(signature);
        pigeonReturn.setProducts(products);
        pigeonReturn.setIsAutoRenewing(isAutoRenewing);
        pigeonReturn.setOriginalJson(originalJson);
        pigeonReturn.setDeveloperPayload(developerPayload);
        pigeonReturn.setIsAcknowledged(isAcknowledged);
        pigeonReturn.setQuantity(quantity);
        pigeonReturn.setPurchaseState(purchaseState);
        pigeonReturn.setAccountIdentifiers(accountIdentifiers);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(13);
      toListResult.add(orderId);
      toListResult.add(packageName);
      toListResult.add(purchaseTime);
      toListResult.add(purchaseToken);
      toListResult.add(signature);
      toListResult.add(products);
      toListResult.add(isAutoRenewing);
      toListResult.add(originalJson);
      toListResult.add(developerPayload);
      toListResult.add(isAcknowledged);
      toListResult.add(quantity);
      toListResult.add(purchaseState == null ? null : purchaseState.index);
      toListResult.add((accountIdentifiers == null) ? null : accountIdentifiers.toList());
      return toListResult;
    }

    static @NonNull PlatformPurchase fromList(@NonNull ArrayList<Object> list) {
      PlatformPurchase pigeonResult = new PlatformPurchase();
      Object orderId = list.get(0);
      pigeonResult.setOrderId((String) orderId);
      Object packageName = list.get(1);
      pigeonResult.setPackageName((String) packageName);
      Object purchaseTime = list.get(2);
      pigeonResult.setPurchaseTime(
          (purchaseTime == null)
              ? null
              : ((purchaseTime instanceof Integer) ? (Integer) purchaseTime : (Long) purchaseTime));
      Object purchaseToken = list.get(3);
      pigeonResult.setPurchaseToken((String) purchaseToken);
      Object signature = list.get(4);
      pigeonResult.setSignature((String) signature);
      Object products = list.get(5);
      pigeonResult.setProducts((List<String>) products);
      Object isAutoRenewing = list.get(6);
      pigeonResult.setIsAutoRenewing((Boolean) isAutoRenewing);
      Object originalJson = list.get(7);
      pigeonResult.setOriginalJson((String) originalJson);
      Object developerPayload = list.get(8);
      pigeonResult.setDeveloperPayload((String) developerPayload);
      Object isAcknowledged = list.get(9);
      pigeonResult.setIsAcknowledged((Boolean) isAcknowledged);
      Object quantity = list.get(10);
      pigeonResult.setQuantity(
          (quantity == null)
              ? null
              : ((quantity instanceof Integer) ? (Integer) quantity : (Long) quantity));
      Object purchaseState = list.get(11);
      pigeonResult.setPurchaseState(PlatformPurchaseState.values()[(int) purchaseState]);
      Object accountIdentifiers = list.get(12);
      pigeonResult.setAccountIdentifiers(
          (accountIdentifiers == null)
              ? null
              : PlatformAccountIdentifiers.fromList((ArrayList<Object>) accountIdentifiers));
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of PurchaseHistoryRecord.
   *
   * <p>See also PurchaseHistoryRecordWrapper on the Dart side.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformPurchaseHistoryRecord {
    private @NonNull Long quantity;

    public @NonNull Long getQuantity() {
      return quantity;
    }

    public void setQuantity(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"quantity\" is null.");
      }
      this.quantity = setterArg;
    }

    private @NonNull Long purchaseTime;

    public @NonNull Long getPurchaseTime() {
      return purchaseTime;
    }

    public void setPurchaseTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchaseTime\" is null.");
      }
      this.purchaseTime = setterArg;
    }

    private @Nullable String developerPayload;

    public @Nullable String getDeveloperPayload() {
      return developerPayload;
    }

    public void setDeveloperPayload(@Nullable String setterArg) {
      this.developerPayload = setterArg;
    }

    private @NonNull String originalJson;

    public @NonNull String getOriginalJson() {
      return originalJson;
    }

    public void setOriginalJson(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"originalJson\" is null.");
      }
      this.originalJson = setterArg;
    }

    private @NonNull String purchaseToken;

    public @NonNull String getPurchaseToken() {
      return purchaseToken;
    }

    public void setPurchaseToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchaseToken\" is null.");
      }
      this.purchaseToken = setterArg;
    }

    private @NonNull String signature;

    public @NonNull String getSignature() {
      return signature;
    }

    public void setSignature(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"signature\" is null.");
      }
      this.signature = setterArg;
    }

    private @NonNull List<String> products;

    public @NonNull List<String> getProducts() {
      return products;
    }

    public void setProducts(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"products\" is null.");
      }
      this.products = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformPurchaseHistoryRecord() {}

    public static final class Builder {

      private @Nullable Long quantity;

      @CanIgnoreReturnValue
      public @NonNull Builder setQuantity(@NonNull Long setterArg) {
        this.quantity = setterArg;
        return this;
      }

      private @Nullable Long purchaseTime;

      @CanIgnoreReturnValue
      public @NonNull Builder setPurchaseTime(@NonNull Long setterArg) {
        this.purchaseTime = setterArg;
        return this;
      }

      private @Nullable String developerPayload;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeveloperPayload(@Nullable String setterArg) {
        this.developerPayload = setterArg;
        return this;
      }

      private @Nullable String originalJson;

      @CanIgnoreReturnValue
      public @NonNull Builder setOriginalJson(@NonNull String setterArg) {
        this.originalJson = setterArg;
        return this;
      }

      private @Nullable String purchaseToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setPurchaseToken(@NonNull String setterArg) {
        this.purchaseToken = setterArg;
        return this;
      }

      private @Nullable String signature;

      @CanIgnoreReturnValue
      public @NonNull Builder setSignature(@NonNull String setterArg) {
        this.signature = setterArg;
        return this;
      }

      private @Nullable List<String> products;

      @CanIgnoreReturnValue
      public @NonNull Builder setProducts(@NonNull List<String> setterArg) {
        this.products = setterArg;
        return this;
      }

      public @NonNull PlatformPurchaseHistoryRecord build() {
        PlatformPurchaseHistoryRecord pigeonReturn = new PlatformPurchaseHistoryRecord();
        pigeonReturn.setQuantity(quantity);
        pigeonReturn.setPurchaseTime(purchaseTime);
        pigeonReturn.setDeveloperPayload(developerPayload);
        pigeonReturn.setOriginalJson(originalJson);
        pigeonReturn.setPurchaseToken(purchaseToken);
        pigeonReturn.setSignature(signature);
        pigeonReturn.setProducts(products);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(quantity);
      toListResult.add(purchaseTime);
      toListResult.add(developerPayload);
      toListResult.add(originalJson);
      toListResult.add(purchaseToken);
      toListResult.add(signature);
      toListResult.add(products);
      return toListResult;
    }

    static @NonNull PlatformPurchaseHistoryRecord fromList(@NonNull ArrayList<Object> list) {
      PlatformPurchaseHistoryRecord pigeonResult = new PlatformPurchaseHistoryRecord();
      Object quantity = list.get(0);
      pigeonResult.setQuantity(
          (quantity == null)
              ? null
              : ((quantity instanceof Integer) ? (Integer) quantity : (Long) quantity));
      Object purchaseTime = list.get(1);
      pigeonResult.setPurchaseTime(
          (purchaseTime == null)
              ? null
              : ((purchaseTime instanceof Integer) ? (Integer) purchaseTime : (Long) purchaseTime));
      Object developerPayload = list.get(2);
      pigeonResult.setDeveloperPayload((String) developerPayload);
      Object originalJson = list.get(3);
      pigeonResult.setOriginalJson((String) originalJson);
      Object purchaseToken = list.get(4);
      pigeonResult.setPurchaseToken((String) purchaseToken);
      Object signature = list.get(5);
      pigeonResult.setSignature((String) signature);
      Object products = list.get(6);
      pigeonResult.setProducts((List<String>) products);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of PurchasesHistoryResult, which contains the components of the Java
   * PurchaseHistoryResponseListener callback.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformPurchaseHistoryResponse {
    private @NonNull PlatformBillingResult billingResult;

    public @NonNull PlatformBillingResult getBillingResult() {
      return billingResult;
    }

    public void setBillingResult(@NonNull PlatformBillingResult setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"billingResult\" is null.");
      }
      this.billingResult = setterArg;
    }

    private @NonNull List<PlatformPurchaseHistoryRecord> purchases;

    public @NonNull List<PlatformPurchaseHistoryRecord> getPurchases() {
      return purchases;
    }

    public void setPurchases(@NonNull List<PlatformPurchaseHistoryRecord> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchases\" is null.");
      }
      this.purchases = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformPurchaseHistoryResponse() {}

    public static final class Builder {

      private @Nullable PlatformBillingResult billingResult;

      @CanIgnoreReturnValue
      public @NonNull Builder setBillingResult(@NonNull PlatformBillingResult setterArg) {
        this.billingResult = setterArg;
        return this;
      }

      private @Nullable List<PlatformPurchaseHistoryRecord> purchases;

      @CanIgnoreReturnValue
      public @NonNull Builder setPurchases(@NonNull List<PlatformPurchaseHistoryRecord> setterArg) {
        this.purchases = setterArg;
        return this;
      }

      public @NonNull PlatformPurchaseHistoryResponse build() {
        PlatformPurchaseHistoryResponse pigeonReturn = new PlatformPurchaseHistoryResponse();
        pigeonReturn.setBillingResult(billingResult);
        pigeonReturn.setPurchases(purchases);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((billingResult == null) ? null : billingResult.toList());
      toListResult.add(purchases);
      return toListResult;
    }

    static @NonNull PlatformPurchaseHistoryResponse fromList(@NonNull ArrayList<Object> list) {
      PlatformPurchaseHistoryResponse pigeonResult = new PlatformPurchaseHistoryResponse();
      Object billingResult = list.get(0);
      pigeonResult.setBillingResult(
          (billingResult == null)
              ? null
              : PlatformBillingResult.fromList((ArrayList<Object>) billingResult));
      Object purchases = list.get(1);
      pigeonResult.setPurchases((List<PlatformPurchaseHistoryRecord>) purchases);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of PurchasesResultWrapper, which contains the components of the Java
   * PurchasesResponseListener callback.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformPurchasesResponse {
    private @NonNull PlatformBillingResult billingResult;

    public @NonNull PlatformBillingResult getBillingResult() {
      return billingResult;
    }

    public void setBillingResult(@NonNull PlatformBillingResult setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"billingResult\" is null.");
      }
      this.billingResult = setterArg;
    }

    private @NonNull List<PlatformPurchase> purchases;

    public @NonNull List<PlatformPurchase> getPurchases() {
      return purchases;
    }

    public void setPurchases(@NonNull List<PlatformPurchase> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchases\" is null.");
      }
      this.purchases = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformPurchasesResponse() {}

    public static final class Builder {

      private @Nullable PlatformBillingResult billingResult;

      @CanIgnoreReturnValue
      public @NonNull Builder setBillingResult(@NonNull PlatformBillingResult setterArg) {
        this.billingResult = setterArg;
        return this;
      }

      private @Nullable List<PlatformPurchase> purchases;

      @CanIgnoreReturnValue
      public @NonNull Builder setPurchases(@NonNull List<PlatformPurchase> setterArg) {
        this.purchases = setterArg;
        return this;
      }

      public @NonNull PlatformPurchasesResponse build() {
        PlatformPurchasesResponse pigeonReturn = new PlatformPurchasesResponse();
        pigeonReturn.setBillingResult(billingResult);
        pigeonReturn.setPurchases(purchases);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((billingResult == null) ? null : billingResult.toList());
      toListResult.add(purchases);
      return toListResult;
    }

    static @NonNull PlatformPurchasesResponse fromList(@NonNull ArrayList<Object> list) {
      PlatformPurchasesResponse pigeonResult = new PlatformPurchasesResponse();
      Object billingResult = list.get(0);
      pigeonResult.setBillingResult(
          (billingResult == null)
              ? null
              : PlatformBillingResult.fromList((ArrayList<Object>) billingResult));
      Object purchases = list.get(1);
      pigeonResult.setPurchases((List<PlatformPurchase>) purchases);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of Java ProductDetails.SubscriptionOfferDetails.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformSubscriptionOfferDetails {
    private @NonNull String basePlanId;

    public @NonNull String getBasePlanId() {
      return basePlanId;
    }

    public void setBasePlanId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"basePlanId\" is null.");
      }
      this.basePlanId = setterArg;
    }

    private @Nullable String offerId;

    public @Nullable String getOfferId() {
      return offerId;
    }

    public void setOfferId(@Nullable String setterArg) {
      this.offerId = setterArg;
    }

    private @NonNull String offerToken;

    public @NonNull String getOfferToken() {
      return offerToken;
    }

    public void setOfferToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"offerToken\" is null.");
      }
      this.offerToken = setterArg;
    }

    private @NonNull List<String> offerTags;

    public @NonNull List<String> getOfferTags() {
      return offerTags;
    }

    public void setOfferTags(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"offerTags\" is null.");
      }
      this.offerTags = setterArg;
    }

    private @NonNull List<PlatformPricingPhase> pricingPhases;

    public @NonNull List<PlatformPricingPhase> getPricingPhases() {
      return pricingPhases;
    }

    public void setPricingPhases(@NonNull List<PlatformPricingPhase> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"pricingPhases\" is null.");
      }
      this.pricingPhases = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformSubscriptionOfferDetails() {}

    public static final class Builder {

      private @Nullable String basePlanId;

      @CanIgnoreReturnValue
      public @NonNull Builder setBasePlanId(@NonNull String setterArg) {
        this.basePlanId = setterArg;
        return this;
      }

      private @Nullable String offerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setOfferId(@Nullable String setterArg) {
        this.offerId = setterArg;
        return this;
      }

      private @Nullable String offerToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setOfferToken(@NonNull String setterArg) {
        this.offerToken = setterArg;
        return this;
      }

      private @Nullable List<String> offerTags;

      @CanIgnoreReturnValue
      public @NonNull Builder setOfferTags(@NonNull List<String> setterArg) {
        this.offerTags = setterArg;
        return this;
      }

      private @Nullable List<PlatformPricingPhase> pricingPhases;

      @CanIgnoreReturnValue
      public @NonNull Builder setPricingPhases(@NonNull List<PlatformPricingPhase> setterArg) {
        this.pricingPhases = setterArg;
        return this;
      }

      public @NonNull PlatformSubscriptionOfferDetails build() {
        PlatformSubscriptionOfferDetails pigeonReturn = new PlatformSubscriptionOfferDetails();
        pigeonReturn.setBasePlanId(basePlanId);
        pigeonReturn.setOfferId(offerId);
        pigeonReturn.setOfferToken(offerToken);
        pigeonReturn.setOfferTags(offerTags);
        pigeonReturn.setPricingPhases(pricingPhases);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(basePlanId);
      toListResult.add(offerId);
      toListResult.add(offerToken);
      toListResult.add(offerTags);
      toListResult.add(pricingPhases);
      return toListResult;
    }

    static @NonNull PlatformSubscriptionOfferDetails fromList(@NonNull ArrayList<Object> list) {
      PlatformSubscriptionOfferDetails pigeonResult = new PlatformSubscriptionOfferDetails();
      Object basePlanId = list.get(0);
      pigeonResult.setBasePlanId((String) basePlanId);
      Object offerId = list.get(1);
      pigeonResult.setOfferId((String) offerId);
      Object offerToken = list.get(2);
      pigeonResult.setOfferToken((String) offerToken);
      Object offerTags = list.get(3);
      pigeonResult.setOfferTags((List<String>) offerTags);
      Object pricingPhases = list.get(4);
      pigeonResult.setPricingPhases((List<PlatformPricingPhase>) pricingPhases);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of UserChoiceDetailsWrapper and Java UserChoiceDetails.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformUserChoiceDetails {
    private @Nullable String originalExternalTransactionId;

    public @Nullable String getOriginalExternalTransactionId() {
      return originalExternalTransactionId;
    }

    public void setOriginalExternalTransactionId(@Nullable String setterArg) {
      this.originalExternalTransactionId = setterArg;
    }

    private @NonNull String externalTransactionToken;

    public @NonNull String getExternalTransactionToken() {
      return externalTransactionToken;
    }

    public void setExternalTransactionToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"externalTransactionToken\" is null.");
      }
      this.externalTransactionToken = setterArg;
    }

    private @NonNull List<PlatformUserChoiceProduct> products;

    public @NonNull List<PlatformUserChoiceProduct> getProducts() {
      return products;
    }

    public void setProducts(@NonNull List<PlatformUserChoiceProduct> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"products\" is null.");
      }
      this.products = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformUserChoiceDetails() {}

    public static final class Builder {

      private @Nullable String originalExternalTransactionId;

      @CanIgnoreReturnValue
      public @NonNull Builder setOriginalExternalTransactionId(@Nullable String setterArg) {
        this.originalExternalTransactionId = setterArg;
        return this;
      }

      private @Nullable String externalTransactionToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setExternalTransactionToken(@NonNull String setterArg) {
        this.externalTransactionToken = setterArg;
        return this;
      }

      private @Nullable List<PlatformUserChoiceProduct> products;

      @CanIgnoreReturnValue
      public @NonNull Builder setProducts(@NonNull List<PlatformUserChoiceProduct> setterArg) {
        this.products = setterArg;
        return this;
      }

      public @NonNull PlatformUserChoiceDetails build() {
        PlatformUserChoiceDetails pigeonReturn = new PlatformUserChoiceDetails();
        pigeonReturn.setOriginalExternalTransactionId(originalExternalTransactionId);
        pigeonReturn.setExternalTransactionToken(externalTransactionToken);
        pigeonReturn.setProducts(products);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(originalExternalTransactionId);
      toListResult.add(externalTransactionToken);
      toListResult.add(products);
      return toListResult;
    }

    static @NonNull PlatformUserChoiceDetails fromList(@NonNull ArrayList<Object> list) {
      PlatformUserChoiceDetails pigeonResult = new PlatformUserChoiceDetails();
      Object originalExternalTransactionId = list.get(0);
      pigeonResult.setOriginalExternalTransactionId((String) originalExternalTransactionId);
      Object externalTransactionToken = list.get(1);
      pigeonResult.setExternalTransactionToken((String) externalTransactionToken);
      Object products = list.get(2);
      pigeonResult.setProducts((List<PlatformUserChoiceProduct>) products);
      return pigeonResult;
    }
  }

  /**
   * Pigeon version of UserChoiseDetails.Product.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformUserChoiceProduct {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable String offerToken;

    public @Nullable String getOfferToken() {
      return offerToken;
    }

    public void setOfferToken(@Nullable String setterArg) {
      this.offerToken = setterArg;
    }

    private @NonNull PlatformProductType type;

    public @NonNull PlatformProductType getType() {
      return type;
    }

    public void setType(@NonNull PlatformProductType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformUserChoiceProduct() {}

    public static final class Builder {

      private @Nullable String id;

      @CanIgnoreReturnValue
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String offerToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setOfferToken(@Nullable String setterArg) {
        this.offerToken = setterArg;
        return this;
      }

      private @Nullable PlatformProductType type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull PlatformProductType setterArg) {
        this.type = setterArg;
        return this;
      }

      public @NonNull PlatformUserChoiceProduct build() {
        PlatformUserChoiceProduct pigeonReturn = new PlatformUserChoiceProduct();
        pigeonReturn.setId(id);
        pigeonReturn.setOfferToken(offerToken);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(id);
      toListResult.add(offerToken);
      toListResult.add(type == null ? null : type.index);
      return toListResult;
    }

    static @NonNull PlatformUserChoiceProduct fromList(@NonNull ArrayList<Object> list) {
      PlatformUserChoiceProduct pigeonResult = new PlatformUserChoiceProduct();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object offerToken = list.get(1);
      pigeonResult.setOfferToken((String) offerToken);
      Object type = list.get(2);
      pigeonResult.setType(PlatformProductType.values()[(int) type]);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class InAppPurchaseApiCodec extends StandardMessageCodec {
    public static final InAppPurchaseApiCodec INSTANCE = new InAppPurchaseApiCodec();

    private InAppPurchaseApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PlatformAccountIdentifiers.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PlatformAlternativeBillingOnlyReportingDetailsResponse.fromList(
              (ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PlatformBillingConfigResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PlatformBillingFlowParams.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PlatformBillingResult.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PlatformOneTimePurchaseOfferDetails.fromList(
              (ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return PlatformPricingPhase.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return PlatformProductDetails.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return PlatformProductDetailsResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return PlatformPurchase.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return PlatformPurchaseHistoryRecord.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return PlatformPurchaseHistoryResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return PlatformPurchasesResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return PlatformQueryProduct.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return PlatformSubscriptionOfferDetails.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PlatformAccountIdentifiers) {
        stream.write(128);
        writeValue(stream, ((PlatformAccountIdentifiers) value).toList());
      } else if (value instanceof PlatformAlternativeBillingOnlyReportingDetailsResponse) {
        stream.write(129);
        writeValue(
            stream, ((PlatformAlternativeBillingOnlyReportingDetailsResponse) value).toList());
      } else if (value instanceof PlatformBillingConfigResponse) {
        stream.write(130);
        writeValue(stream, ((PlatformBillingConfigResponse) value).toList());
      } else if (value instanceof PlatformBillingFlowParams) {
        stream.write(131);
        writeValue(stream, ((PlatformBillingFlowParams) value).toList());
      } else if (value instanceof PlatformBillingResult) {
        stream.write(132);
        writeValue(stream, ((PlatformBillingResult) value).toList());
      } else if (value instanceof PlatformOneTimePurchaseOfferDetails) {
        stream.write(133);
        writeValue(stream, ((PlatformOneTimePurchaseOfferDetails) value).toList());
      } else if (value instanceof PlatformPricingPhase) {
        stream.write(134);
        writeValue(stream, ((PlatformPricingPhase) value).toList());
      } else if (value instanceof PlatformProductDetails) {
        stream.write(135);
        writeValue(stream, ((PlatformProductDetails) value).toList());
      } else if (value instanceof PlatformProductDetailsResponse) {
        stream.write(136);
        writeValue(stream, ((PlatformProductDetailsResponse) value).toList());
      } else if (value instanceof PlatformPurchase) {
        stream.write(137);
        writeValue(stream, ((PlatformPurchase) value).toList());
      } else if (value instanceof PlatformPurchaseHistoryRecord) {
        stream.write(138);
        writeValue(stream, ((PlatformPurchaseHistoryRecord) value).toList());
      } else if (value instanceof PlatformPurchaseHistoryResponse) {
        stream.write(139);
        writeValue(stream, ((PlatformPurchaseHistoryResponse) value).toList());
      } else if (value instanceof PlatformPurchasesResponse) {
        stream.write(140);
        writeValue(stream, ((PlatformPurchasesResponse) value).toList());
      } else if (value instanceof PlatformQueryProduct) {
        stream.write(141);
        writeValue(stream, ((PlatformQueryProduct) value).toList());
      } else if (value instanceof PlatformSubscriptionOfferDetails) {
        stream.write(142);
        writeValue(stream, ((PlatformSubscriptionOfferDetails) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface InAppPurchaseApi {
    /** Wraps BillingClient#isReady. */
    @NonNull
    Boolean isReady();
    /** Wraps BillingClient#startConnection(BillingClientStateListener). */
    void startConnection(
        @NonNull Long callbackHandle,
        @NonNull PlatformBillingChoiceMode billingMode,
        @NonNull Result<PlatformBillingResult> result);
    /** Wraps BillingClient#endConnection(BillingClientStateListener). */
    void endConnection();
    /**
     * Wraps BillingClient#getBillingConfigAsync(GetBillingConfigParams,
     * BillingConfigResponseListener).
     */
    void getBillingConfigAsync(@NonNull Result<PlatformBillingConfigResponse> result);
    /** Wraps BillingClient#launchBillingFlow(Activity, BillingFlowParams). */
    @NonNull
    PlatformBillingResult launchBillingFlow(@NonNull PlatformBillingFlowParams params);
    /**
     * Wraps BillingClient#acknowledgePurchase(AcknowledgePurchaseParams,
     * AcknowledgePurchaseResponseListener).
     */
    void acknowledgePurchase(
        @NonNull String purchaseToken, @NonNull Result<PlatformBillingResult> result);
    /** Wraps BillingClient#consumeAsync(ConsumeParams, ConsumeResponseListener). */
    void consumeAsync(@NonNull String purchaseToken, @NonNull Result<PlatformBillingResult> result);
    /** Wraps BillingClient#queryPurchasesAsync(QueryPurchaseParams, PurchaseResponseListener). */
    void queryPurchasesAsync(
        @NonNull PlatformProductType productType,
        @NonNull Result<PlatformPurchasesResponse> result);
    /**
     * Wraps BillingClient#queryPurchaseHistoryAsync(QueryPurchaseHistoryParams,
     * PurchaseHistoryResponseListener).
     */
    void queryPurchaseHistoryAsync(
        @NonNull PlatformProductType productType,
        @NonNull Result<PlatformPurchaseHistoryResponse> result);
    /**
     * Wraps BillingClient#queryProductDetailsAsync(QueryProductDetailsParams,
     * ProductDetailsResponseListener).
     */
    void queryProductDetailsAsync(
        @NonNull List<PlatformQueryProduct> products,
        @NonNull Result<PlatformProductDetailsResponse> result);
    /** Wraps BillingClient#isFeatureSupported(String). */
    @NonNull
    Boolean isFeatureSupported(@NonNull String feature);
    /** Wraps BillingClient#isAlternativeBillingOnlyAvailableAsync(). */
    void isAlternativeBillingOnlyAvailableAsync(@NonNull Result<PlatformBillingResult> result);
    /** Wraps BillingClient#showAlternativeBillingOnlyInformationDialog(). */
    void showAlternativeBillingOnlyInformationDialog(@NonNull Result<PlatformBillingResult> result);
    /**
     * Wraps
     * BillingClient#createAlternativeBillingOnlyReportingDetailsAsync(AlternativeBillingOnlyReportingDetailsListener).
     */
    void createAlternativeBillingOnlyReportingDetailsAsync(
        @NonNull Result<PlatformAlternativeBillingOnlyReportingDetailsResponse> result);

    /** The codec used by InAppPurchaseApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return InAppPurchaseApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `InAppPurchaseApi` to handle messages through the `binaryMessenger`.
     */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable InAppPurchaseApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.isReady",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isReady();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.startConnection",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number callbackHandleArg = (Number) args.get(0);
                PlatformBillingChoiceMode billingModeArg =
                    PlatformBillingChoiceMode.values()[(int) args.get(1)];
                Result<PlatformBillingResult> resultCallback =
                    new Result<PlatformBillingResult>() {
                      public void success(PlatformBillingResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startConnection(
                    (callbackHandleArg == null) ? null : callbackHandleArg.longValue(),
                    billingModeArg,
                    resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.endConnection",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.endConnection();
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.getBillingConfigAsync",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<PlatformBillingConfigResponse> resultCallback =
                    new Result<PlatformBillingConfigResponse>() {
                      public void success(PlatformBillingConfigResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getBillingConfigAsync(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.launchBillingFlow",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformBillingFlowParams paramsArg = (PlatformBillingFlowParams) args.get(0);
                try {
                  PlatformBillingResult output = api.launchBillingFlow(paramsArg);
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.acknowledgePurchase",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String purchaseTokenArg = (String) args.get(0);
                Result<PlatformBillingResult> resultCallback =
                    new Result<PlatformBillingResult>() {
                      public void success(PlatformBillingResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.acknowledgePurchase(purchaseTokenArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.consumeAsync",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String purchaseTokenArg = (String) args.get(0);
                Result<PlatformBillingResult> resultCallback =
                    new Result<PlatformBillingResult>() {
                      public void success(PlatformBillingResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.consumeAsync(purchaseTokenArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.queryPurchasesAsync",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformProductType productTypeArg =
                    PlatformProductType.values()[(int) args.get(0)];
                Result<PlatformPurchasesResponse> resultCallback =
                    new Result<PlatformPurchasesResponse>() {
                      public void success(PlatformPurchasesResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.queryPurchasesAsync(productTypeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.queryPurchaseHistoryAsync",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformProductType productTypeArg =
                    PlatformProductType.values()[(int) args.get(0)];
                Result<PlatformPurchaseHistoryResponse> resultCallback =
                    new Result<PlatformPurchaseHistoryResponse>() {
                      public void success(PlatformPurchaseHistoryResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.queryPurchaseHistoryAsync(productTypeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.queryProductDetailsAsync",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<PlatformQueryProduct> productsArg = (List<PlatformQueryProduct>) args.get(0);
                Result<PlatformProductDetailsResponse> resultCallback =
                    new Result<PlatformProductDetailsResponse>() {
                      public void success(PlatformProductDetailsResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.queryProductDetailsAsync(productsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.isFeatureSupported",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String featureArg = (String) args.get(0);
                try {
                  Boolean output = api.isFeatureSupported(featureArg);
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.isAlternativeBillingOnlyAvailableAsync",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<PlatformBillingResult> resultCallback =
                    new Result<PlatformBillingResult>() {
                      public void success(PlatformBillingResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isAlternativeBillingOnlyAvailableAsync(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.showAlternativeBillingOnlyInformationDialog",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<PlatformBillingResult> resultCallback =
                    new Result<PlatformBillingResult>() {
                      public void success(PlatformBillingResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.showAlternativeBillingOnlyInformationDialog(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.createAlternativeBillingOnlyReportingDetailsAsync",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<PlatformAlternativeBillingOnlyReportingDetailsResponse> resultCallback =
                    new Result<PlatformAlternativeBillingOnlyReportingDetailsResponse>() {
                      public void success(
                          PlatformAlternativeBillingOnlyReportingDetailsResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createAlternativeBillingOnlyReportingDetailsAsync(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class InAppPurchaseCallbackApiCodec extends StandardMessageCodec {
    public static final InAppPurchaseCallbackApiCodec INSTANCE =
        new InAppPurchaseCallbackApiCodec();

    private InAppPurchaseCallbackApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PlatformAccountIdentifiers.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PlatformBillingResult.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PlatformPurchase.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PlatformPurchasesResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PlatformUserChoiceDetails.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PlatformUserChoiceProduct.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PlatformAccountIdentifiers) {
        stream.write(128);
        writeValue(stream, ((PlatformAccountIdentifiers) value).toList());
      } else if (value instanceof PlatformBillingResult) {
        stream.write(129);
        writeValue(stream, ((PlatformBillingResult) value).toList());
      } else if (value instanceof PlatformPurchase) {
        stream.write(130);
        writeValue(stream, ((PlatformPurchase) value).toList());
      } else if (value instanceof PlatformPurchasesResponse) {
        stream.write(131);
        writeValue(stream, ((PlatformPurchasesResponse) value).toList());
      } else if (value instanceof PlatformUserChoiceDetails) {
        stream.write(132);
        writeValue(stream, ((PlatformUserChoiceDetails) value).toList());
      } else if (value instanceof PlatformUserChoiceProduct) {
        stream.write(133);
        writeValue(stream, ((PlatformUserChoiceProduct) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class InAppPurchaseCallbackApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public InAppPurchaseCallbackApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */
    /** The codec used by InAppPurchaseCallbackApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return InAppPurchaseCallbackApiCodec.INSTANCE;
    }
    /** Called for BillingClientStateListener#onBillingServiceDisconnected(). */
    public void onBillingServiceDisconnected(
        @NonNull Long callbackHandleArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.onBillingServiceDisconnected";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(callbackHandleArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called for PurchasesUpdatedListener#onPurchasesUpdated(BillingResult, List<Purchase>). */
    public void onPurchasesUpdated(
        @NonNull PlatformPurchasesResponse updateArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.onPurchasesUpdated";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(updateArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called for UserChoiceBillingListener#userSelectedAlternativeBilling(UserChoiceDetails). */
    public void userSelectedalternativeBilling(
        @NonNull PlatformUserChoiceDetails detailsArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.userSelectedalternativeBilling";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(detailsArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
  }
}
